{"ast":null,"code":"var _jsxFileName = \"/Users/amoswelike/projects/olympia_v2/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { withFormik } from \"formik\"; // import { Formik, Field, ErrorMessage, FormikProps } from \"formik\";\n\nimport * as Yup from \"yup\";\nimport Link from 'next/link';\nimport Layout from \"../components/Layout\";\nimport { Form, Button } from 'react-bootstrap';\nimport FormBox from \"../components/formBox\"; // import logo from \"../static/ologo.jpeg\";\n\nvar InnerForm = function InnerForm(props) {\n  var values = props.values,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleSubmit = props.handleSubmit,\n      title = props.title;\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(FormBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Email addresss\"), __jsx(Form.Control, {\n    type: \"email\",\n    placeholder: \"Enter email\" // onChange={handleChange}\n    // onBlur={handleBlur}\n    // value={values.email}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), __jsx(Form.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Password\"), __jsx(Form.Control, {\n    type: \"email\",\n    placeholder: \"Enter email\" // onChange={handleChange}\n    // onBlur={handleBlur}\n    // value={values.email}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), __jsx(Button, {\n    variant: \"outline-secondary\",\n    type: \"submit\" //     disabled={\n    //     isSubmitting ||\n    //     !!(errors.email && touched.email) ||\n    //     !!(errors.password && touched.password)\n    // }\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Submit\"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Register\")))), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, title));\n};\n\nvar App = withFormik({\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: props.initialEmail || \"\",\n      password: props.initialPassword || \"\"\n    };\n  },\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email(\"Email not valid\").required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\")\n  }),\n  handleSubmit: function handleSubmit(_ref) // { props, setSubmitting, setErrors }\n  {\n    var email = _ref.email,\n        password = _ref.password;\n    console.log(email, password);\n  }\n})(InnerForm);\nexport default App;","map":{"version":3,"sources":["/Users/amoswelike/projects/olympia_v2/pages/index.tsx"],"names":["React","withFormik","Yup","Link","Layout","Form","Button","FormBox","InnerForm","props","values","handleChange","handleBlur","handleSubmit","title","App","mapPropsToValues","email","initialEmail","password","initialPassword","validationSchema","object","shape","string","required","console","log"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { withFormik, FormikProps } from \"formik\";\n// import { Formik, Field, ErrorMessage, FormikProps } from \"formik\";\nimport * as Yup from \"yup\";\nimport Link from 'next/link';\nimport Layout from \"../components/Layout\";\nimport { Form, Button } from 'react-bootstrap';\nimport FormBox from \"../components/formBox\";\n\n// import logo from \"../static/ologo.jpeg\";\n\ninterface FormValues {\n    email: string;\n    password: string;\n}\n\ninterface OtherProps {\n    title?: string;\n}\n\ninterface MyFormProps {\n    initialEmail?: string;\n    initialPassword?: string;\n}\n\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n    const {\n        values,\n        // errors,\n        // touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        // isSubmitting,\n        title\n    } = props;\n\n    return (\n        <Layout>\n            <FormBox>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Label>Email addresss</Form.Label>\n                        <Form.Control \n                            type=\"email\" \n                            placeholder=\"Enter email\" \n                            // onChange={handleChange}\n                            // onBlur={handleBlur}\n                            // value={values.email}\n                             />\n                    </Form.Group>\n\n                    <Form.Group >\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control \n                            type=\"email\" \n                            placeholder=\"Enter email\" \n                            // onChange={handleChange}\n                            // onBlur={handleBlur}\n                            // value={values.email}\n                             />\n                        {/* <Form.Control \n                            type=\"password\" \n                            placeholder=\"Password\"\n                            // onChange={handleChange}\n                            // onBlur={handleBlur}\n                            // value={values.password} \n                            /> */}\n                    </Form.Group>\n                    <Button \n                        variant=\"outline-secondary\" \n                        type=\"submit\"\n                    //     disabled={\n                    //     isSubmitting ||\n                    //     !!(errors.email && touched.email) ||\n                    //     !!(errors.password && touched.password)\n                    // }\n                    >\n                        Submit\n                    </Button><br/>\n                    <Link href=\"/register\">\n                        <a>Register</a>\n                    </Link>\n                </Form>\n            </FormBox>\n            <h1>{title}</h1>\n        </Layout>\n    );\n};\n\nconst App = withFormik<MyFormProps, FormValues>({\n    mapPropsToValues: props => ({\n        email: props.initialEmail || \"\",\n        password: props.initialPassword || \"\"\n    }),\n\n    validationSchema: Yup.object().shape({\n        email: Yup.string()\n            .email(\"Email not valid\")\n            .required(\"Email is required\"),\n        password: Yup.string().required(\"Password is required\")\n    }),\n\n    handleSubmit(\n        { email, password }: FormValues,\n        // { props, setSubmitting, setErrors }\n    ) {\n        console.log(email, password);\n    }\n})(InnerForm);\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}